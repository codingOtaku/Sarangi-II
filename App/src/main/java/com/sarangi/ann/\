package com.mycompany.ann; 

import com.google.gson.Gson;
import com.google.gson.stream.JsonReader;
import com.google.gson.reflect.*;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.Collections;

import java.lang.reflect.Type;

import com.mycompany.kmeans.*;

import com.mycompany.structures.Song;

import smile.classification.SVM;
import smile.math.kernel.GaussianKernel;
import java.lang.Object.*;
import smile.math.Math;

public class ANN {

        double training_dataset[][];
        int training_genre[];
        double test_dataset[][];
        int test_genre[];

        public ANN(){
                training_dataset = new double[450][1];
                training_genre = new int[450];
                test_dataset = new double[50][1];
                test_genre = new int[50];
        }


        public void readAllSongs (String training_filename,String test_filename) throws FileNotFoundException, IOException {
                Gson gson = new Gson();
                JsonReader training_json = new JsonReader(new FileReader(training_filename));
                JsonReader test_json = new JsonReader(new FileReader(test_filename));
 
                Type listType = new TypeToken<List<Song>>(){}.getType();
                List<Song> training_songs = gson.fromJson(training_json,listType);

                List<Song> test_songs = gson.fromJson(test_json,listType);

             /*    for (Song item: songs) {
                       
                         if(item.getSongName().equals("Pop-2.mp3"))
                                 pop = new SarangiSong(item);
                         if(item.getSongName().equals("Classic-2.mp3"))
                                 classic = new SarangiSong(item);
                         if(item.getSongName().equals("Rock-2.mp3"))
                                 rock = new SarangiSong(item);
                         if(item.getSongName().equals("Jazz-2.mp3"))
                                 jazz = new SarangiSong(item);
                         if(item.getSongName().equals("Hiphop-2.mp3"))
                                 hiphop = new SarangiSong(item);

                         
                                 }
                         */
                int i=0;
                for (Song item: training_songs){
                        training_dataset[i][0] = item.getIntensity();
                        if ( item.getSongName().contains("classic"))
                               training_genre[i] = 1;
                        else if (item.getSongName().contains("jazz"))
                                training_genre[i] = 2;
                        else if (item.getSongName().contains("rock"))
                                training_genre[i] = 3;
                        else if (item.getSongName().contains("pop"))
                                training_genre[i] = 4;
                        else // (item.getSongName().contains("hiphop"))
                                training_genre[i] = 5;
                        i++;
                }
                i=0;
                for (Song item : test_songs){
                        test_dataset[i][0] = item.getIntensity();
                        if ( item.getSongName().contains("classic"))
                                test_genre[i] = 1;
                        else if (item.getSongName().contains("jazz"))
                                test_genre[i] = 2;
                        else if (item.getSongName().contains("rock"))
                                test_genre[i] = 3;
                        else if (item.getSongName().contains("pop"))
                                test_genre[i] = 4;
                        else // (item.getSongName().contains("hiphop"))
                                test_genre[i] = 5;
                        i++;
                }
                 }

        public void runSVM(){
                int j=0;
                for (int i=0;i<450;i++){
                //        System.out.println("intensity "+training_dataset[i][0]);
                        if(training_genre[i]==1)
                                j++;

                }
                System.out.println(j);

                SVM<double[]> svm = new SVM<double[]>(new GaussianKernel(8.0), 5.0, Math.max(training_genre)+1, SVM.Multiclass.ONE_VS_ONE);
                svm.learn(training_dataset,training_genre);
                svm.finish();

                int error = 0;
                /*for (int i = 0; i < test_dataset.length; i++){
                        if (svm.predict(test_dataset[i]) != test_genre[i]){
                                error++;
                        }
                }
                */

        }

}
